version: "3.8"

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aqua_sec_cloud_inventory
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq
    restart: always
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network

  app:
    build: .
    container_name: aqua_sec_cloud_inventory_app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: aqua_sec_cloud_inventory
      RABBITMQ_URL: amqp://rabbit:rabbit@rabbitmq:5672/
      SERVER_PORT: 8080
    networks:
      - app_network
    command: ["./aqua_sec_cloud-inventory", "server"]

volumes:
  pgdata:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge